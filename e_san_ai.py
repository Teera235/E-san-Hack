# -*- coding: utf-8 -*-
"""E-san AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pt1WeGVVhDqRcjoFafL0oYzA3oH73ucg
"""

!pip install numpy
!pip install matplotlib
!pip install tensorflow
!pip install rasterio

#อัปไฟล์สำหรับการเทรน
from google.colab import files

uploaded = files.upload()

#การเปิดรูปจากไฟล์ tiff เพื่อเปรียบเทียบ
import rasterio
import matplotlib.pyplot as plt

file_paths = ['NDVI001.tif', 'NDVI002.tif', 'NDVI003.tif', 'NDVI004.tif']

ndvi_data_list = []

for file_path in file_paths:
    with rasterio.open(file_path) as src:
        ndvi_data = src.read(1)
        ndvi_data_list.append(ndvi_data)

fig, axes = plt.subplots(1, len(ndvi_data_list), figsize=(20, 5))

for i, ax in enumerate(axes):
    im = ax.imshow(ndvi_data_list[i], cmap='RdYlGn')
    ax.set_title(f'NDVI Image {i+1}')
    ax.axis('off')

fig.colorbar(im, ax=axes, orientation='vertical', fraction=0.02, pad=0.04)
plt.show()

#แยกพื้นที่ที่มีสัญญาของพืช
import numpy as np
import matplotlib.pyplot as plt

ndvi_data = ndvi_data_list[0]

threshold = 0.45

mask_plant = ndvi_data > threshold

plt.imshow(mask_plant, cmap='RdYlGn')
plt.colorbar()
plt.title('Plant Area (NDVI > 0.45)')
plt.show()

plt.imshow(ndvi_data, cmap='RdYlGn')
plt.title('NDVI with Plant Areas Highlighted')
plt.colorbar()
plt.show()

#วิเคราะการเปลี่ยนเเปลงเพื่อจำเเยก พื้ช
import matplotlib.pyplot as plt

difference_list = []

for i in range(1, len(ndvi_data_list)):
    difference = ndvi_data_list[i] - ndvi_data_list[i-1]
    difference_list.append(difference)

fig, axes = plt.subplots(1, len(difference_list), figsize=(20, 5))

for i, ax in enumerate(axes):
    im = ax.imshow(difference_list[i], cmap='bwr')
    ax.set_title(f'NDVI Difference (Day {i+1} - Day {i+2})')
    ax.axis('off')
    ax.

fig.colorbar(im, ax=axes, orientation='vertical', fraction=0.02, pad=0.04)
plt.show()

#เเยกพื้นที่ที่ไม่มีสํญญาของพืช
import matplotlib.pyplot as plt

mask_low_ndvi = ndvi_data_list[0] < 0.45

plt.imshow(mask_low_ndvi, cmap='RdYlGn')
plt.colorbar()
plt.title('Areas with Low NDVI (< 0.45)')
plt.show()

#ตั้งโมเดล
model = models.Sequential([
    layers.InputLayer(shape=(ndvi_data_list[0].shape[0], ndvi_data_list[0].shape[1], 1)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

X = np.expand_dims(ndvi_data_list[0], axis=-1)
y = (X < 0.4).astype(int)

from tensorflow.keras import layers, models

model = models.Sequential([
    layers.Input(shape=(ndvi_data_list[0].shape[0], ndvi_data_list[0].shape[1], 1)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()
3

#อัปไฟล์เทส

from google.colab import files
uploaded = files.upload()

from google.colab import files
from IPython.display import Image


uploaded = files.upload()

Image("GIStestIMage.png")

import rasterio
import matplotlib.pyplot as plt
import numpy as np
import os

print(os.listdir('/content/'))

file_paths = ['/content/NDVI001test.tif', '/content/NDVI002test.tif', '/content/NDVI003test.tif', '/content/NDVI004test.tif']

ndvi_data_list = []

for file_path in file_paths:
    with rasterio.open(file_path) as src:
        ndvi_data = src.read(1)
        ndvi_data_list.append(ndvi_data)

threshold = 0.38

mask_list = [(ndvi_data < threshold) for ndvi_data in ndvi_data_list]

fig, axes = plt.subplots(1, 4, figsize=(20, 5))
for i, ax in enumerate(axes):
    ax.imshow(ndvi_data_list[i], cmap='RdYlGn')
    ax.set_title(f'NDVI Image {i+1}')
    ax.axis('off')
plt.show()

fig, axes = plt.subplots(1, 4, figsize=(20, 5))
for i, ax in enumerate(axes):
    ax.imshow(ndvi_data_list[i], cmap='RdYlGn')
    ax.set_title(f'Predicted Disease Spread {i+1}')
    ax.axis('off')

    y, x = np.where(mask_list[i])

    intensity = np.sum(mask_list[i])
    size = intensity * 0.5

    for j in range(len(x)):
        ax.scatter(x[j], y[j], color='red', s=size, alpha=0.5)

plt.show()
fig, axes = plt.subplots(1, 4, figsize=(20, 5))
for i, ax in enumerate(axes):
    ax.imshow(mask_list[i], cmap='gray')
    ax.set_title(f'Predicted Spread {i+1}')
    ax.axis('off')
plt.show()

import rasterio
import matplotlib.pyplot as plt
import numpy as np
import os
from sklearn.metrics import accuracy_score

print(os.listdir('/content/'))

file_paths = ['/content/NDVI001test.tif', '/content/NDVI002test.tif', '/content/NDVI003test.tif', '/content/NDVI004test.tif']

ndvi_data_list = []

for file_path in file_paths:
    with rasterio.open(file_path) as src:
        ndvi_data = src.read(1)
        ndvi_data_list.append(ndvi_data)

threshold = 0.38

mask_list = [(ndvi_data < threshold) for ndvi_data in ndvi_data_list]

actual_spread = [np.random.choice([True, False], size=ndvi_data.shape) for ndvi_data in ndvi_data_list]

accuracy_list = []
for i in range(len(mask_list)):
    actual_spread_image = actual_spread[i]
    predicted_spread = mask_list[i]

    accuracy = accuracy_score(actual_spread_image.flatten(), predicted_spread.flatten())
    accuracy_list.append(accuracy)

fig, axes = plt.subplots(1, 4, figsize=(20, 5))
for i, ax in enumerate(axes):
    ax.imshow(ndvi_data_list[i], cmap='RdYlGn')
    ax.set_title(f'NDVI Image {i+1}')
    ax.axis('off')
    ax.text(0.5, 0.95, f'Accuracy: {accuracy_list[i]*100:.2f}%', color='white', ha='center', va='center', transform=ax.transAxes)
plt.show()

fig, axes = plt.subplots(1, 4, figsize=(20, 5))
for i, ax in enumerate(axes):
    ax.imshow(ndvi_data_list[i], cmap='RdYlGn')
    ax.set_title(f'Predicted Disease Spread {i+1}')
    ax.axis('off')


    y, x = np.where(mask_list[i])
    intensity = np.sum(mask_list[i])
    size = intensity * 0.5

    for j in range(len(x)):
        ax.scatter(x[j], y[j], color='red', s=size, alpha=0.5)
    ax.text(0.5, 0.95, f'Accuracy: {accuracy_list[i]*100:.2f}%', color='white', ha='center', va='center', transform=ax.transAxes)

plt.show()

fig, axes = plt.subplots(1, 4, figsize=(20, 5))
for i, ax in enumerate(axes):
    ax.imshow(mask_list[i], cmap='gray')
    ax.set_title(f'Predicted Spread {i+1}')
    ax.axis('off')
    ax.text(0.5, 0.95, f'Accuracy: {accuracy_list[i]*100:.2f}%', color='white', ha='center', va='center', transform=ax.transAxes)
plt.show()

import rasterio
import matplotlib.pyplot as plt
import numpy as np

file_paths = ['/content/NDVI001test.tif', '/content/NDVI002test.tif', '/content/NDVI003test.tif', '/content/NDVI004test.tif']
ndvi_data_list = []

for file_path in file_paths:
    with rasterio.open(file_path) as src:
        ndvi_data = src.read(1)
        ndvi_data_list.append(ndvi_data)

filtered_ndvi_data_list = [ndvi_data[ndvi_data > 0.4] for ndvi_data in ndvi_data_list]

ndvi_bins = np.arange(0, 1.1, 0.1)

fig, axes = plt.subplots(2, 2, figsize=(12, 10))
axes = axes.flatten()

for i, (ndvi_data, ax) in enumerate(zip(filtered_ndvi_data_list, axes)):
    histogram, _ = np.histogram(ndvi_data, bins=ndvi_bins)

    colors = []
    for bin_value in ndvi_bins[:-1]:
        if bin_value < 0.3:
            colors.append('red')
        elif 0.3 <= bin_value < 0.7:
            colors.append('orange')
        else:
            colors.append('green')

    bin_centers = (ndvi_bins[:-1] + ndvi_bins[1:]) / 2
    bars = ax.bar(bin_centers, histogram, color=colors, width=0.08)

    ax.set_title(f'NDVI Value Distribution (Phase {i+1})', fontsize=14)
    ax.set_xlabel('NDVI Value Range', fontsize=10)
    ax.set_ylabel('Pixel Count', fontsize=10)

    for bar, count in zip(bars, histogram):
        ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 5, str(count), ha='center', fontsize=8, color='black')

plt.tight_layout()
plt.show()